課題を確認しました、OKです。

・課題３のコーディングで論理演算子の&&を使ったのですね、良い工夫だと思います。

・String型の比較に==でなく、equalsメソッドを使えたのもgoodです。

・20代の判定で、```20 <= age && age < 30```という条件判定も正解です。境界値(この場合は20や30)にはバグが入りがちです。気を付けていきましょう。

・課題1、OKです。
if文での条件判定、文字列比較を正しく実装できましたね。

・課題2、残念ながら題意が正しく伝わらなかったようです。
入力の血液型と、自分の血液型が一致しない場合もメッセージを表示しましょう。

朝木さんのコードでは、B型の場合に、

```
あなたの思い通りに物事が進みそうです
なりたい自分を思い描いて
```
というメッセージになります。これはOKです。

一方、A型の場合に、

```
余裕を持った行動を心がけて
```

というメッセージでした。課題としては、以下のメッセージが出力されることを要求しています。

```
余裕を持った行動を心がけて
ゆったりとした気分で過ごせそう
```

条件分岐の入れ方を見直してみましょう。

・課題3、こちらも課題2と同様で血液型不一致の場合も、指定のメッセージが出るようにしましょう。

```
A型:ゆったりとした気分で過ごせそう
B型:なりたい自分を思い描いて
O型:情報収集が吉
AB型:本当に大切なものが見えてきそう
```

・総じて、条件分岐の書き方、文字列との比較はよくできています。
この課題は、
1. 課題1を実装
2. それにコードを追加して課題2を実装
3. さらにそれにコードを追加して課題3を実装
とすると、比較的書きやすいです。

・厳しいようですが、20代の判定に誤りがあります。

```
age > 20 && age < 30
```

この条件判定ですと、ageが20の場合に、「20代でない」と判定されてしまいます。
境界値(この場合は20や30)にはバグが入りがちです。気を付けていきましょう。

・コーディングスタイルで気になった点があったのでコメントします。（間違いではありません）

```
{if(age > 20 && age < 30) //20代
    System.out.println("人との心の距離に気をつけて");
else //20代以外
    System.out.println("短所も長所に変えられます");}
```

上のコードで、一番外側のカッコ```{}```は不要です。
またこの記述方法(if文、else文のあとのカッコ省略)はバグの温床になりがちなので勧めません。
まとめると、以下のようなコーディングを勧めます。

```
if (age > 20 && age < 30) {
	System.out.println("人との心の距離に気をつけて");
} else {
	System.out.println("短所も長所に変えられます");
}
```

・同様に以下の箇所もコメントします。

```
{
if(bloodType.equals("B"))
	System.out.println("なりたい自分を思い描いて");}
{if(bloodType.equals("O"))
	System.out.println("情報収集が吉");}
{ if(bloodType.equals("AB"))
    System.out.println("本当に大切なものが見えてきそう");
}}else {
	System.out.println("余裕を持った行動を心がけて");}
```

以下のようなコーディングを勧めます。

```
if (bloodType.equals("B")) {
	System.out.println("なりたい自分を思い描いて");
} else if (bloodType.equals("O")) {
	System.out.println("情報収集が吉");
} else if (bloodType.equals("AB")) {
	System.out.println("本当に大切なものが見えてきそう");
} else {
	System.out.println("余裕を持った行動を心がけて");
}
```
